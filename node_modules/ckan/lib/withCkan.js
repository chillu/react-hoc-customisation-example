import { Query } from 'react-apollo';
import gql from 'graphql-tag';

function fetchFromCkan (url, page, pageSize) {
  // ...
}

/**
 * Responsible for async definition retrieval,
 * and managing async data fetching based on this.
 * Requires embedding in an <ApolloProvider>.
 * Does not concern itself with rendering (separation of concerns).
 */
export default (WrappedComponent, { props: { dataSourceId } }) => (
  <Query
    query={gql`
      {
        getDataSourceDefinition(id: props.dataSourceId) {
          remoteUrl
          fields {
            name
            title
            casting
          }
          filters {
            name
            title
            type
          }
        }
      }
    `}
  >
    {({ loading, error, data }) => {
      if (loading) return <p>Loading...</p>;
      if (error) return <p>Error :(</p>;

      const onNext = (page, pageSize) => {
        return fetchFromCkan(data.remoteUrl, page + 1, pageSize);
      };

      return <WrappedComponent
        onNext={onNext}
        fields={data.fields}
        filters={data.filters}
        {...props}
      />;
    }}
  </Query>
);
